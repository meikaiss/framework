apply plugin: 'com.android.application'

android {
    compileSdkVersion rootProject.ext.android.compileSdkVersion
    buildToolsVersion rootProject.ext.android.buildToolsVersion

    defaultConfig {
        applicationId rootProject.ext.android.applicationId

        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        versionCode rootProject.ext.android.versionCode
        versionName rootProject.ext.android.versionName

        generatedDensities = []
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    aaptOptions {
        additionalParameters "--no-version-vectors"
    }

    lintOptions {
        // 移除lint检查的error
        abortOnError false
    }

    signingConfigs {
        debug {
            storeFile file(debugMKeystoreFile)
            storePassword debugMKeystorePassword
            keyAlias debugMKeyAlias
            keyPassword debugMKeyPassword
        }
        release {
            storeFile file(releaseMKeystoreFile)
            storePassword releaseMKeystorePassword
            keyAlias releaseMKeyAlias
            keyPassword releaseMKeyPassword
        }
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.debug
            minifyEnabled false
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        release {
            signingConfig signingConfigs.release
            minifyEnabled true
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

}

dependencies {
    testCompile rootProject.ext.dependencies["junit"]
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile project(':libframework')
    compile project(':libapi')
    compile project(':libcustomview')
    compile project(':libmedia')
}



android.applicationVariants.all { variant ->

    // 开始构建当前变体的即时时间
    def currentTime = buildTime()

    variant.outputs.each { output ->
        println "**************************************"
        println "currentTime: ${currentTime}"
        println "variant: ${output.name}"
        println "buildType: ${variant.buildType.name}"
        println "flavor: ${variant.flavorName}"
        println "manifest:  ${output.processResources.manifestFile}"
        println "**************************************"

        //将生成的apk文件保存至根目录的_apk文件下
        def outputFile = output.outputFile
        if (outputFile != null && outputFile.name.endsWith('.apk')) {

            File outputDirectory = new File("${projectDir}/../_apk");
            def apkName = "${variant.buildType.name}/app-${output.name}-V${frameworkVersion}-#${buildNumber}-${currentTime}.apk"

            output.outputFile = new File(outputDirectory, apkName)
        }

        // 如果开启混淆,则保留混淆的映射关系文件,方便release进行调试
        if (variant.getBuildType().isMinifyEnabled()) {
            variant.assemble.doLast {
                copy {
                    from variant.mappingFile
                    into "${projectDir}/../_mappings"
                    rename { String fileName ->
                        "mapping-${output.name}-V${frameworkVersion}-#${buildNumber}-${currentTime}.txt"
                    }
                }
            }
        }

    }
}

def buildTime() {
    return new Date().format("yyyy.MM.dd_HH.mm.ss", TimeZone.getTimeZone("UTC"))
}