import java.lang.reflect.Array
import java.lang.reflect.Field

apply plugin: 'com.android.application'

android {
    compileSdkVersion rootProject.ext.android.compileSdkVersion
    buildToolsVersion rootProject.ext.android.buildToolsVersion

    defaultConfig {
        applicationId rootProject.ext.android.applicationId

        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        versionCode rootProject.ext.android.versionCode
        versionName rootProject.ext.android.versionName

        generatedDensities = []
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    aaptOptions {
        additionalParameters "--no-version-vectors"
    }

    lintOptions {
        // 移除lint检查的error
        abortOnError false

        htmlOutput file("$project.buildDir/reports/lint/lint.html")
        xmlOutput file("$project.buildDir/reports/lint/lint.xml")
    }

    signingConfigs {
        debug {
            storeFile file(debugMKeystoreFile)
            storePassword debugMKeystorePassword
            keyAlias debugMKeyAlias
            keyPassword debugMKeyPassword
        }
        release {
            storeFile file(releaseMKeystoreFile)
            storePassword releaseMKeystorePassword
            keyAlias releaseMKeyAlias
            keyPassword releaseMKeyPassword
        }
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.debug
            minifyEnabled false
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            debuggable true
        }

        release {
            signingConfig signingConfigs.release
            minifyEnabled true
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

}

dependencies {
    testCompile rootProject.ext.dependencies["junit"]
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile project(':libframework')
    compile project(':libapi')
    compile project(':libcustomview')
    compile project(':libmedia')
    compile project(':libaidl')
    compile project(':libndk')
}

def buildTime() {
    return new Date().format("yyyy.MM.dd_HH.mm.ss")
}

android.applicationVariants.all { variant ->

    variant.outputs.each { output ->
        println "**************************************"
        println "variant: ${output.name}"
        println "buildType: ${variant.buildType.name}"
        println "flavor: ${variant.flavorName}"
        println "manifest:  ${output.processResources.manifestFile}"
        println "**************************************"

        //将生成的apk文件保存至根目录的_apk文件下
        def outputFile = output.outputFile
        if (outputFile != null && outputFile.name.endsWith('.apk')) {

            deleteDirectory("${projectDir}/../_apk/${variant.buildType.name}")

            File outputDirectory = new File("${projectDir}/../_apk");
            def apkName = "${variant.buildType.name}/app-${output.name}-V${frameworkVersion}-#${buildNumber}.apk"
            output.outputFile = new File(outputDirectory, apkName)
        }

        // 如果开启混淆,则保留混淆的映射关系文件,方便release进行调试
        if (variant.getBuildType().isMinifyEnabled()) {
            variant.assemble.doLast {

                deleteDirectory("${projectDir}/../_mappings")

                copy {
                    from variant.mappingFile
                    into "${projectDir}/../_mappings"
                    rename { String fileName ->
                        "mapping-${output.name}-V${frameworkVersion}-#${buildNumber}.txt"
                    }
                }
            }
        }
    }
}


//将Activity类从主dex中移除
def patchKeepSpecs() {
    def clazz = Class.forName("com.android.build.gradle.internal.tasks.multidex.CreateManifestKeepList")
    def keepSpecsField = clazz.getDeclaredField("KEEP_SPECS")
    keepSpecsField.setAccessible(true)
    def keepSpecs = (Map) keepSpecsField.get(null)

    Class mapClazz = Class.forName("com.google.common.collect.RegularImmutableMap")
    Field tableField = mapClazz.getDeclaredField("table")
    tableField.setAccessible(true)
    Object table = tableField.get(keepSpecs)
    int length = Array.getLength(table)

    int activityIndex = -1

    for (int i = 0; i < length; ++i) {
        Object entry = Array.get(table, i)
        if (entry != null) {
            java.util.Map.Entry<String, String> mapEntry = (java.util.Map.Entry<String, String>) entry
            if ("activity".equals(mapEntry.getKey())) {
                activityIndex = i
                break
            }
        }
    }

    if (activityIndex == -1) {
        println "Failed to patch KEEP_SPECS: no 'activity' root found"
    } else {
        Array.set(table, activityIndex, null)
        println "KEEP_SPECS patched: removed 'activity' root"
    }
}

patchKeepSpecs()

