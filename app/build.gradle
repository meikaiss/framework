apply plugin: 'com.android.application'

android {
    compileSdkVersion 23
    buildToolsVersion '23.0.2'

    defaultConfig {
        applicationId "com.android.framework.demo"
        minSdkVersion 14
        targetSdkVersion 23
        versionCode 1
        versionName "1.0"
        generatedDensities = []
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    aaptOptions {
        additionalParameters "--no-version-vectors"
    }

    // 移除lint检查的error
    lintOptions {
        abortOnError false
    }

    signingConfigs {
        debug {
            storeFile file(debugMKeystoreFile)
            storePassword debugMKeystorePassword
            keyAlias debugMKeyAlias
            keyPassword debugMKeyPassword
        }
        release {
            storeFile file(releaseMKeystoreFile)
            storePassword releaseMKeystorePassword
            keyAlias releaseMKeyAlias
            keyPassword releaseMKeyPassword
        }
    }

    buildTypes {
        debug{
            signingConfig signingConfigs.debug
            minifyEnabled false
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        release {
            signingConfig signingConfigs.release
            minifyEnabled true
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

}

dependencies {
    testCompile 'junit:junit:4.12'

    // 编译libs目录下的所有jar包
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile project(':libframework')
    compile project(':libapi')
    compile project(':libui')
}

android.applicationVariants.all { variant ->
    variant.outputs.each { output ->
        println "****************************"
        println "variant: ${output.name}"
        println "flavor: ${variant.flavorName}"
        println "manifest:  ${output.processResources.manifestFile}"
        println "****************************"

        def apkName = "app-${output.name}-${frameworkVersion}-#${buildNumber}.apk"
        def file = output.outputFile
        output.outputFile = new File(file.parent, apkName)

        if(variant.getBuildType().isMinifyEnabled()){
            variant.assemble.doLast{
                copy{
                    from variant.mappingFile
                    into "${projectDir}/../mappings"
                    rename { String fileName ->
                        "mapping-${variant.name}-${output.name}-${frameworkVersion}-#${buildNumber}.txt"
                    }
                }
            }
        }
    }
}
