apply plugin: 'me.tatarka.retrolambda'
apply plugin: 'com.android.application'

android {
    compileSdkVersion rootProject.ext.android.compileSdkVersion
    buildToolsVersion rootProject.ext.android.buildToolsVersion

    defaultConfig {
        applicationId rootProject.ext.android.applicationId

        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        versionCode rootProject.ext.android.versionCode
        versionName rootProject.ext.android.versionName

        vectorDrawables.useSupportLibrary = true
    }

    aaptOptions {
        // 关闭 aapt提供的基础的png(有且仅有png)优化功能, 因为"png的优化不一定是幂等的", 例如用工具A优化后 再用工具B优化的图片可能比原图还大
        // 注意: 关闭优化 并不会排除对 .9 图的预处理
        cruncherEnabled false
    }

    compileOptions {
        sourceCompatibility rootProject.ext.jdkVersion
        targetCompatibility rootProject.ext.jdkVersion
    }

    lintOptions {
        // 移除lint检查的error
        abortOnError false
    }

    dexOptions {
        //incremental true
        //preDexLibraries = false
        javaMaxHeapSize "4g"
    }

    signingConfigs {
        debug {
            storeFile file(debugMKeystoreFile)
            storePassword debugMKeystorePassword
            keyAlias debugMKeyAlias
            keyPassword debugMKeyPassword
        }
        release {
            storeFile file(releaseMKeystoreFile)
            storePassword releaseMKeystorePassword
            keyAlias releaseMKeyAlias
            keyPassword releaseMKeyPassword
        }
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.debug
            minifyEnabled false
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            debuggable true
        }

        release {
            signingConfig signingConfigs.release
            minifyEnabled true
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

}

dependencies {
    testCompile rootProject.ext.dependencies["junit"]
    compile fileTree(include: ['*.jar'], dir: 'libs')

    compile rootProject.ext.dependencies["flexbox"]

    compile project(':libframework')
    compile project(':libapi')
    compile project(':libcustomview')
    compile project(':libmedia')
    compile project(':libaidl')
    compile project(':libndk')
    compile project(':libwebsocket')
    compile project(':libwebview')

    compile 'com.github.bumptech.glide:glide:4.3.1'

    /**
     * 这个 glide:compiler 是个编译器 注解处理器，这个注解处理器会对 标记 @GlideModule 的 AppGlideModule，生成 GlideApp
     */
    compile 'com.github.bumptech.glide:compiler:4.3.1'

    compile 'com.android.support.constraint:constraint-layout:1.0.2'

}

android.applicationVariants.all { variant ->

    variant.outputs.each { output ->
        println "**************************************"
        println "variant: ${output.name}"
        println "buildType: ${variant.buildType.name}"
        println "flavor: ${variant.flavorName}"
        println "manifest:  ${output.processResources.manifestFile}"
        println "rootProject.ext.android.compileSdkVersion:  ${rootProject.ext.android.compileSdkVersion}"
        println "rootProject.ext.android.buildToolsVersion:  ${rootProject.ext.android.buildToolsVersion}"
        println "rootProject.ext.android.applicationId:  ${rootProject.ext.android.applicationId}"
        println "rootProject.ext.android.minSdkVersion:  ${rootProject.ext.android.minSdkVersion}"
        println "rootProject.ext.android.targetSdkVersion:  ${rootProject.ext.android.targetSdkVersion}"
        println "rootProject.ext.android.versionCode:  ${rootProject.ext.android.versionCode}"
        println "rootProject.ext.android.versionName:  ${rootProject.ext.android.versionName}"
        println "jdkVersion:  ${rootProject.ext.jdkVersion}"
        println "**************************************"

        //将生成的apk文件保存至根目录的_apk文件下
        def outputFile = output.outputFile
        if (outputFile != null && outputFile.name.endsWith('.apk')) {

            deleteDirectory("${projectDir}/../_apk/${variant.buildType.name}")

            File outputDirectory = new File("${projectDir}/../_apk");
            def apkName = "${variant.buildType.name}/app-${output.name}-V${frameworkVersionName}-#${buildNumber}.apk"
            output.outputFile = new File(outputDirectory, apkName)
        }

        // 如果开启混淆,则保留混淆的映射关系文件,方便release进行调试
        if (variant.getBuildType().isMinifyEnabled()) {
            variant.assemble.doLast {

                deleteDirectory("${projectDir}/../_mappings")

                copy {
                    from variant.mappingFile
                    into "${projectDir}/../_mappings"
                    rename { String fileName ->
                        "mapping-${output.name}-V${frameworkVersionName}-#${buildNumber}.txt"
                    }
                }
            }
        }
    }
}

def buildTime() {
    return new Date().format("yyyy.MM.dd_HH.mm.ss")
}
