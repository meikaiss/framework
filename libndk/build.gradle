apply plugin: 'com.android.library'

android {
    compileSdkVersion rootProject.ext.android.compileSdkVersion
    buildToolsVersion rootProject.ext.android.buildToolsVersion

    defaultConfig {
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        versionCode rootProject.ext.android.versionCode
        versionName rootProject.ext.android.versionName
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    //这里设置目录，默认就这样写就可以了
    sourceSets {
        main {
            jni.srcDirs = []
            jniLibs.srcDir "src/main/libs"
        }
    }
}

dependencies {
    testImplementation rootProject.ext.dependencies["junit"]

    api fileTree(dir: 'libs', include: ['*.jar'])

    api rootProject.ext.dependencies["appcompat-v7"]
}

tasks.withType(JavaCompile) {
    compileTask -> compileTask.dependsOn ndkBuild
}



task ndkBuild(type: Exec) {
    workingDir file('src/main/jni')
    commandLine getNdkBuildCmd()
}

def getNdkDir() {
    if (System.env.ANDROID_NDK_ROOT != null)
        return System.env.ANDROID_NDK_ROOT
    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
    def ndkdir = properties.getProperty('ndk.dir', null)
    if (ndkdir == null)
        throw new GradleException("NDK location not found. Define location with ndk.dir in the local.properties file or with an ANDROID_NDK_ROOT environment variable.")

    println "****************************"
    println "ndkdir===: " + ndkdir
    println "****************************"
    return ndkdir
}

def getNdkBuildCmd() {
    def ndkbuild = getNdkDir() + "/ndk-build"
//    ndkbuild += ".cmd"  //windows 下才需要此配置
    return ndkbuild
}